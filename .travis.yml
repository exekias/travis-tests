sudo: required
dist: xenial
services:
  - docker
language: go

jobs:
  include:
    - os: linux
      stage: test
      before_script:
        # install dind kubernetes
        - wget https://github.com/kubernetes-sigs/kubeadm-dind-cluster/releases/download/v0.1.0/dind-cluster-v1.13.sh
        - chmod +x dind-cluster-v1.13.sh
        - ./dind-cluster-v1.13.sh up
        # Add Kubectl directory to the PATH.
        - export PATH="$HOME/.kubeadm-dind-cluster:$PATH"
        # Wait for Kubernetes to be up and ready.
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
      script:
        - kubectl get po --all-namespaces

    - os: linux
      stage: test
      before_script:
        # Download and install kubectl (optional)
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        # Download and install kind using cURL
        - curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/0.0.1/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
        # Create a new Kubernetes cluster using kind
        - kind create cluster
        # Set KUBECONFIG environment variable
        - export KUBECONFIG=“$(kind get kubeconfig-path)”
      script:
        - kubectl get po --all-namespaces

    - os: linux
      stage: test
      addons:
        snaps:
          - name: microk8s
            classic: true
            channel: stable
      before_script:
        - microk8s.start
      script:
        - microk8s.kubectl get po --all-namespaces

    - os: linux
      stage: test
      env:
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config

      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.35.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - mkdir logs
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.13.0 --mount --mount-string logs:/var/log
        - "sudo chown -R travis: /home/travis/.minikube/"

      script:
        # Following is just to demo that the kubernetes cluster works.
        - kubectl cluster-info
        # Verify kube-addon-manager.
        # kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
        # Wait for kube-dns to be ready.
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
        # Create example Redis deployment on Kubernetes.
        - kubectl run travis-example --image=redis --labels="app=travis-example"
        # Make sure created pod is scheduled and running.
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n default get pods -lapp=travis-example -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for travis-example deployment to be available"; kubectl get pods -n default; done
        - find logs